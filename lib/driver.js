// Generated by CoffeeScript 1.6.3
(function() {
  var Cassandra, Driver, Promise;

  Cassandra = require('node-cassandra-cql');

  Promise = require('poseidon').Promise;

  Driver = (function() {
    function Driver() {}

    Driver._configuration = {};

    Driver._connections = {};

    Driver.configure = function(connName, connConfig) {
      if (connConfig == null) {
        throw new Error('Configuration object required');
      }
      Driver._configuration[connName] = connConfig;
    };

    Driver.openConnection = function(connName, options) {
      var connection;
      if (options == null) {
        options = {};
      }
      if (Driver._configuration[connName] == null) {
        return Promise.reject(new Error('Connection not configured'));
      }
      if (Driver._connections[connName] != null) {
        return Driver._connections[connName];
      }
      connection = (function() {
        var client, _connection;
        _connection = Promise.pending();
        client = new Cassandra.Client(Driver._configuration[connName]);
        client.connect(function(err) {
          if (err != null) {
            return _connection.reject(err);
          } else {
            return _connection.resolve(client);
          }
        });
        return _connection.promise;
      })();
      return connection.then(function(client) {
        return Driver._connections[connName] = connection;
      })["catch"](function(err) {
        return Driver.openConnection(connName);
      });
    };

    Driver.closeConnection = function(connName) {
      var _defer;
      if (Driver._connections[connName] == null) {
        return Promise.reject(new Error('Connection does not exist'));
      }
      _defer = Promise.pending();
      Driver._connections[connName].then(function(client) {
        return client.shutdown(function(err, result) {
          if (err) {
            return _defer.reject(err);
          }
          delete Driver._connections[connName];
          return _defer.resolve(result);
        });
      });
      return _defer.promise;
    };

    Driver.reset = function() {
      var connConfig, connName, _connections, _ref;
      _connections = [];
      _ref = Driver._configuration;
      for (connName in _ref) {
        connConfig = _ref[connName];
        if (Driver._connections[connName] != null) {
          _connections.push(Driver.closeConnection(connName));
        }
        delete Driver._configuration[connName];
      }
      return Promise.all(_connections);
    };

    Driver.shutdown = function() {
      var connConfig, connName, _connections, _ref;
      _connections = [];
      _ref = Driver._configuration;
      for (connName in _ref) {
        connConfig = _ref[connName];
        if (Driver._connections[connName] != null) {
          _connections.push(Driver.closeConnection(connName));
        }
      }
      return Promise.all(_connections);
    };

    return Driver;

  })();

  module.exports = Driver;

}).call(this);
